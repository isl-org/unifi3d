# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python scripts/accelerate/acc_train.py hparams_search=acc_doctree_vqvae_optuna experiment=acc_dualoctree_vae_shapenet

defaults:
  - override /hydra/launcher: ray
  - override /hydra/sweeper: optuna
  - override /logger: null
  - override /data: dualoctree_shape

trainer:
  max_epochs: 20
  log_every_n_iter: -1
  log_image_every_n_iters: -1 # How often to log images within iterations. Disabled by default (-1).
  check_val_every_n_epoch: 1
  save_checkpoint_every_n_epoch: -1

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged!
optimized_metric: "val_loss"

# Number of GPUs involved in the hyperparameter search
num_parallel_process: 8

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  launcher:
    ray:
      init:
        num_gpus: ${num_parallel_process}
        local_mode: False
      remote:
        num_gpus: 1
        max_calls: 1

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: "doctree_vqvae_dit"

    # number of parallel workers (i.e. GPUs working in parallel)
    n_jobs: ${num_parallel_process}

    # 'minimize' or 'maximize' the objective
    direction: minimize

    # total number of runs that will be executed
    n_trials: 20

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 12345
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      # model.optimizer._target_: choice(torch.optim.Adam, torch.optim.AdamW, torch.optim.Adadelta, torch.optim.Adagrad)
      # model.optimizer.lr: interval(0.0001, 0.1)
      # model.optimizer.weight_decay: interval(0.001, 0.3)
      # data.train_batch_size: choice(14, 28, 56, 112)
      net_encode.code_channel: choice(8, 16, 32, 64, 128, 256, 512)
      net_encode.quantizer.codebook_size: choice(256, 512, 1024, 2048)
