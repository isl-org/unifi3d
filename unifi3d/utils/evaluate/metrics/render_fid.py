from pathlib import Path

from diffusers import StableDiffusionPipeline
import numpy as np
from PIL import Image
import torch
from torchmetrics.image.fid import FrechetInceptionDistance
from torchvision import transforms

from unifi3d.utils.evaluate.metrics.base3d_metric import Base3dMetric
from unifi3d.utils.evaluate.metrics.utils import EXT_PNG


class RenderFID(Base3dMetric):
    """
    Computes the Frechet Inception Distance between the renders of an object and an equal
    number of images generated by Stable Diffusion with the given prompt.
    """

    def _initialize(
        self, sd_version: float = 2.1, feature_layer: int = 2048, device: str = "cuda"
    ) -> None:
        """
        Args:
            sd_version: The version of the Stable Diffusion model
            feature_layer: The layer of the Inception v3 network used to compute features
            device: The device on which to place the model, cuda or cpu
        """
        self.sd_version = sd_version
        self.feature_layer = feature_layer
        self.device = device

        # Load FID function
        self.loss_fn = FrechetInceptionDistance(feature=feature_layer)
        self.transform = transforms.PILToTensor()

        # Load Stable Diffusion generator
        if self.sd_version == 2.1:
            self.pipe = StableDiffusionPipeline.from_pretrained(
                "stabilityai/stable-diffusion-2-1-base", torch_dtype=torch.float32
            )
        else:
            raise NotImplementedError
        self.pipe.to(device)

    def __call__(self, text_prompt: str, renders_path: str):
        """
        Args:
            Text prompt: A string text prompt
            renders_path: Path to object renders
        Returns:
            Float with the Render FID
        """

        # select all the .png files from the given root directory
        # files are sorted in alphabetical order
        imagefiles = sorted(
            filter(
                # predicate: has ".png" extension (case-insensitive)
                lambda filepath: filepath.name.lower().endswith(EXT_PNG),
                # get files from root directory
                Path(renders_path).iterdir(),
            )
        )
        num_renders = len(imagefiles)
        sd_gens = self.pipe(
            text_prompt, width=256, height=256, num_images_per_prompt=num_renders
        ).images

        object_renderings = []
        sd_images = []
        for i in range(num_renders):
            render = Image.open(imagefiles[i]).convert("RGB")
            object_renderings.append(self.transform(render))
            sd_images.append(self.transform(sd_gens[i]))

        self.loss_fn.update(torch.stack(sd_images, 0), real=True)
        self.loss_fn.update(torch.stack(object_renderings, 0), real=False)
        metric = self.loss_fn.compute().cpu().numpy()
        self.loss_fn.reset()

        return metric
