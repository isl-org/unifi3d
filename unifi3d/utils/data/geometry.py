"""Geometry tools"""

import numpy as np
from collections import defaultdict

_SEP = "/"


def get_combined_geometry(scene_dict):
    """Combines the meshes in a numpy scene dict created with blender_utils.scene_to_numpy()

    This function discards all information except vertices and triangles.

    Args:
        scene_dict: A dict as generated by blender_utils.scene_to_numpy()

    Returns:
        A dict with vertices and triangles
    """
    # split with respect to object name into subdicts
    objs = defaultdict(dict)
    for k, v in scene_dict.items():
        name = k.split(_SEP)[0]
        field = k.split(_SEP)[1]
        if field in ("vertices", "triangles", "matrix_world"):
            objs[name][field] = v

    list_of_mesh_dicts = list(objs.values())

    num_tris = sum([d["triangles"].shape[0] for d in list_of_mesh_dicts])

    triangles = np.empty((num_tris, 3), dtype=np.int64)
    idx_offset = 0
    tris_start = 0
    for d in list_of_mesh_dicts:
        triangles[tris_start : tris_start + d["triangles"].shape[0]] = (
            d["triangles"] + idx_offset
        )
        idx_offset += d["vertices"].shape[0]
        tris_start += d["triangles"].shape[0]
        # apply transform
        matrix_world = d["matrix_world"]
        d["vertices"] = (
            d["vertices"].reshape(-1, 3) @ matrix_world[:3, :3].T
            + matrix_world[:3, 3][None, ...]
        )

    vertices = np.concatenate([d["vertices"] for d in list_of_mesh_dicts], axis=0)
    return {"vertices": vertices, "triangles": triangles}
